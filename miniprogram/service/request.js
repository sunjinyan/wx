"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Coolcar = void 0;
const camelcaseKeys = require("camelcase-keys");
const auth_pb_1 = require("./proto_gen/auth/auth_pb");
var Coolcar;
(function (Coolcar) {
    const serverAddr = 'http://localhost:8080';
    const AUTH_ERR = 'AUTH_ERR';
    const authData = {
        token: '',
        expireMs: 0,
    };
    async function sendRequestWithAuthRetry(o, a) {
        await login();
        const authOpt = a || {
            attachAuthHeader: true,
            retryOnAuthError: true,
        };
        try {
            await login();
            return sendRequest(o, authOpt);
        }
        catch (err) {
            if (err === AUTH_ERR && authOpt.retryOnAuthError) {
                authData.token = '';
                authData.expireMs = 0;
                return sendRequestWithAuthRetry(o, {
                    attachAuthHeader: authOpt.attachAuthHeader,
                    retryOnAuthError: false,
                });
            }
            else {
                throw err;
            }
        }
    }
    Coolcar.sendRequestWithAuthRetry = sendRequestWithAuthRetry;
    async function login() {
        if (authData.token && authData.expireMs >= Date.now()) {
            return;
        }
        const wxResp = await wxLogin();
        const resp = await sendRequest({
            method: 'POST',
            path: '/v1/auth/login',
            data: {
                code: wxResp.code,
            },
            respMarshaller: auth_pb_1.auth.v1.LoginResponse.fromObject,
        }, {
            attachAuthHeader: false,
            retryOnAuthError: false,
        });
        authData.token = resp.accessToken;
        authData.expireMs = Date.now() + resp.expiresIn * 1000;
    }
    Coolcar.login = login;
    function sendRequest(o, a) {
        const authOpt = a || {
            attachAuthHeader: true,
        };
        return new Promise((resolve, reject) => {
            const header = {};
            if (a.attachAuthHeader) {
                if (authData.token && authData.expireMs >= Date.now()) {
                    header.authorization = 'Bearer ' + authData.token;
                }
                else {
                    reject(AUTH_ERR);
                    return;
                }
            }
            if (authOpt.attachAuthHeader && authData.token && authData.expireMs >= Date.now()) {
                header.authorization = 'Bearer ' + authData.token;
            }
            wx.request({
                url: serverAddr + o.path,
                method: o.method,
                data: o.data,
                header,
                success: res => {
                    if (res.statusCode === 401) {
                        reject(AUTH_ERR);
                    }
                    else if (res.statusCode >= 400) {
                        reject(res);
                    }
                    else {
                        resolve(o.respMarshaller(camelcaseKeys(res.data, {
                            deep: true,
                        })));
                    }
                },
                fail: reject
            });
        });
    }
    function wxLogin() {
        return new Promise((resolve, reject) => {
            wx.login({
                success: resolve,
                fail: reject
            });
        });
    }
})(Coolcar = exports.Coolcar || (exports.Coolcar = {}));
//# sourceMappingURL=data:application/json;base64,